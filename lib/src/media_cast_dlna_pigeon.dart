// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

/// Represents the current transport state
enum TransportState {
  stopped,
  playing,
  paused,
  transitioning,
  noMediaPresent,
}

/// Represents a UPnP/DLNA device discovered on the network
class DlnaDevice {
  DlnaDevice({
    required this.udn,
    required this.friendlyName,
    required this.deviceType,
    required this.manufacturerName,
    required this.modelName,
    required this.ipAddress,
    required this.port,
    this.modelDescription,
    this.presentationUrl,
    this.iconUrl,
  });

  /// Unique Device Name
  String udn;

  /// Human-readable device name
  String friendlyName;

  /// Device type (e.g., MediaRenderer, MediaServer)
  String deviceType;

  /// Manufacturer name
  String manufacturerName;

  /// Model name
  String modelName;

  /// Device IP address
  String ipAddress;

  /// Device port
  int port;

  /// Optional model description
  String? modelDescription;

  /// Optional presentation URL
  String? presentationUrl;

  /// Optional icon URL
  String? iconUrl;

  Object encode() {
    return <Object?>[
      udn,
      friendlyName,
      deviceType,
      manufacturerName,
      modelName,
      ipAddress,
      port,
      modelDescription,
      presentationUrl,
      iconUrl,
    ];
  }

  static DlnaDevice decode(Object result) {
    result as List<Object?>;
    return DlnaDevice(
      udn: result[0]! as String,
      friendlyName: result[1]! as String,
      deviceType: result[2]! as String,
      manufacturerName: result[3]! as String,
      modelName: result[4]! as String,
      ipAddress: result[5]! as String,
      port: result[6]! as int,
      modelDescription: result[7] as String?,
      presentationUrl: result[8] as String?,
      iconUrl: result[9] as String?,
    );
  }
}

/// Represents a UPnP service available on a device
class DlnaService {
  DlnaService({
    required this.serviceType,
    required this.serviceId,
    required this.scpdUrl,
    required this.controlUrl,
    required this.eventSubUrl,
  });

  /// Service type (e.g., AVTransport, RenderingControl, ContentDirectory)
  String serviceType;

  /// Service ID
  String serviceId;

  /// Service Control Protocol Description URL
  String scpdUrl;

  /// Control URL for actions
  String controlUrl;

  /// Event subscription URL
  String eventSubUrl;

  Object encode() {
    return <Object?>[
      serviceType,
      serviceId,
      scpdUrl,
      controlUrl,
      eventSubUrl,
    ];
  }

  static DlnaService decode(Object result) {
    result as List<Object?>;
    return DlnaService(
      serviceType: result[0]! as String,
      serviceId: result[1]! as String,
      scpdUrl: result[2]! as String,
      controlUrl: result[3]! as String,
      eventSubUrl: result[4]! as String,
    );
  }
}

/// Represents media content that can be played
class MediaItem {
  MediaItem({
    required this.id,
    required this.title,
    required this.uri,
    required this.mimeType,
    this.metadata,
    this.size,
  });

  /// Content ID
  String id;

  /// Content title
  String title;

  /// Content URI
  String uri;

  /// MIME type
  String mimeType;

  /// Structured metadata (audio, video, image)
  MediaMetadata? metadata;

  /// File size in bytes
  int? size;

  Object encode() {
    return <Object?>[
      id,
      title,
      uri,
      mimeType,
      metadata,
      size,
    ];
  }

  static MediaItem decode(Object result) {
    result as List<Object?>;
    return MediaItem(
      id: result[0]! as String,
      title: result[1]! as String,
      uri: result[2]! as String,
      mimeType: result[3]! as String,
      metadata: result[4] as MediaMetadata?,
      size: result[5] as int?,
    );
  }
}

/// Abstract class for media metadata
sealed class MediaMetadata {
}

/// Audio-specific metadata
class AudioMetadata extends MediaMetadata {
  AudioMetadata({
    this.artist,
    this.album,
    this.genre,
    this.duration,
    this.albumArtUri,
    this.description,
    this.originalTrackNumber,
    this.upnpClass,
  });

  String? artist;

  String? album;

  String? genre;

  int? duration;

  String? albumArtUri;

  String? description;

  int? originalTrackNumber;

  String? upnpClass;

  Object encode() {
    return <Object?>[
      artist,
      album,
      genre,
      duration,
      albumArtUri,
      description,
      originalTrackNumber,
      upnpClass,
    ];
  }

  static AudioMetadata decode(Object result) {
    result as List<Object?>;
    return AudioMetadata(
      artist: result[0] as String?,
      album: result[1] as String?,
      genre: result[2] as String?,
      duration: result[3] as int?,
      albumArtUri: result[4] as String?,
      description: result[5] as String?,
      originalTrackNumber: result[6] as int?,
      upnpClass: result[7] as String?,
    );
  }
}

/// Video-specific metadata
class VideoMetadata extends MediaMetadata {
  VideoMetadata({
    this.resolution,
    this.duration,
    this.description,
    this.thumbnailUri,
    this.genre,
    this.upnpClass,
    this.bitrate,
  });

  String? resolution;

  int? duration;

  String? description;

  String? thumbnailUri;

  String? genre;

  String? upnpClass;

  int? bitrate;

  Object encode() {
    return <Object?>[
      resolution,
      duration,
      description,
      thumbnailUri,
      genre,
      upnpClass,
      bitrate,
    ];
  }

  static VideoMetadata decode(Object result) {
    result as List<Object?>;
    return VideoMetadata(
      resolution: result[0] as String?,
      duration: result[1] as int?,
      description: result[2] as String?,
      thumbnailUri: result[3] as String?,
      genre: result[4] as String?,
      upnpClass: result[5] as String?,
      bitrate: result[6] as int?,
    );
  }
}

/// Image-specific metadata
class ImageMetadata extends MediaMetadata {
  ImageMetadata({
    this.resolution,
    this.description,
    this.thumbnailUri,
    this.date,
    this.upnpClass,
  });

  String? resolution;

  String? description;

  String? thumbnailUri;

  String? date;

  String? upnpClass;

  Object encode() {
    return <Object?>[
      resolution,
      description,
      thumbnailUri,
      date,
      upnpClass,
    ];
  }

  static ImageMetadata decode(Object result) {
    result as List<Object?>;
    return ImageMetadata(
      resolution: result[0] as String?,
      description: result[1] as String?,
      thumbnailUri: result[2] as String?,
      date: result[3] as String?,
      upnpClass: result[4] as String?,
    );
  }
}

/// Represents playback information
class PlaybackInfo {
  PlaybackInfo({
    required this.state,
    required this.position,
    required this.duration,
    this.currentTrackUri,
    this.currentTrackMetadata,
  });

  /// Current transport state
  TransportState state;

  /// Current position in seconds
  int position;

  /// Total duration in seconds
  int duration;

  /// Current track URI
  String? currentTrackUri;

  /// Current track metadata
  String? currentTrackMetadata;

  Object encode() {
    return <Object?>[
      state,
      position,
      duration,
      currentTrackUri,
      currentTrackMetadata,
    ];
  }

  static PlaybackInfo decode(Object result) {
    result as List<Object?>;
    return PlaybackInfo(
      state: result[0]! as TransportState,
      position: result[1]! as int,
      duration: result[2]! as int,
      currentTrackUri: result[3] as String?,
      currentTrackMetadata: result[4] as String?,
    );
  }
}

/// Volume information
class VolumeInfo {
  VolumeInfo({
    required this.volume,
    required this.muted,
  });

  /// Volume level (0-100)
  int volume;

  /// Whether audio is muted
  bool muted;

  Object encode() {
    return <Object?>[
      volume,
      muted,
    ];
  }

  static VolumeInfo decode(Object result) {
    result as List<Object?>;
    return VolumeInfo(
      volume: result[0]! as int,
      muted: result[1]! as bool,
    );
  }
}

/// Discovery options
class DiscoveryOptions {
  DiscoveryOptions({
    this.searchTarget,
    this.timeout = 5,
  });

  /// Search target (ST header) - can be "upnp:rootdevice", "ssdp:all", or specific device type
  String? searchTarget;

  /// Discovery timeout in seconds
  int timeout;

  Object encode() {
    return <Object?>[
      searchTarget,
      timeout,
    ];
  }

  static DiscoveryOptions decode(Object result) {
    result as List<Object?>;
    return DiscoveryOptions(
      searchTarget: result[0] as String?,
      timeout: result[1]! as int,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is TransportState) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is DlnaDevice) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is DlnaService) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is MediaItem) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is AudioMetadata) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is VideoMetadata) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is ImageMetadata) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is PlaybackInfo) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is VolumeInfo) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is DiscoveryOptions) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : TransportState.values[value];
      case 130: 
        return DlnaDevice.decode(readValue(buffer)!);
      case 131: 
        return DlnaService.decode(readValue(buffer)!);
      case 132: 
        return MediaItem.decode(readValue(buffer)!);
      case 133: 
        return AudioMetadata.decode(readValue(buffer)!);
      case 134: 
        return VideoMetadata.decode(readValue(buffer)!);
      case 135: 
        return ImageMetadata.decode(readValue(buffer)!);
      case 136: 
        return PlaybackInfo.decode(readValue(buffer)!);
      case 137: 
        return VolumeInfo.decode(readValue(buffer)!);
      case 138: 
        return DiscoveryOptions.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Host API for device discovery and control
class MediaCastDlnaApi {
  /// Constructor for [MediaCastDlnaApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MediaCastDlnaApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Initialize the UPnP service and prepare for device discovery/control
  /// This must be called before any other operations
  Future<void> initializeUpnpService() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.initializeUpnpService$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Check if UPnP service is initialized and ready
  Future<bool> isUpnpServiceInitialized() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.isUpnpServiceInitialized$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// Shutdown and cleanup UPnP service
  Future<void> shutdownUpnpService() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.shutdownUpnpService$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Start UPnP/DLNA device discovery
  /// Returns immediately, devices are reported via the DeviceDiscoveryApi callback
  /// Note: initializeUpnpService() must be called first
  Future<void> startDiscovery(DiscoveryOptions options) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.startDiscovery$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[options]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Stop device discovery
  Future<void> stopDiscovery() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.stopDiscovery$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Get list of currently discovered devices
  Future<List<DlnaDevice>> getDiscoveredDevices() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getDiscoveredDevices$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<DlnaDevice>();
    }
  }

  /// Refresh device information
  Future<DlnaDevice?> refreshDevice(String deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.refreshDevice$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as DlnaDevice?);
    }
  }

  /// Get services available on a device
  Future<List<DlnaService>> getDeviceServices(String deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getDeviceServices$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<DlnaService>();
    }
  }

  /// Check if device supports a specific service type
  Future<bool> hasService(String deviceUdn, String serviceType) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.hasService$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, serviceType]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// Browse content directory of a media server
  /// parentId: ID of the container to browse (use "0" for root)
  /// startIndex: Starting index for pagination
  /// requestCount: Number of items to request
  Future<List<MediaItem>> browseContentDirectory(String deviceUdn, String parentId, int startIndex, int requestCount) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.browseContentDirectory$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, parentId, startIndex, requestCount]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<MediaItem>();
    }
  }

  /// Search content directory
  Future<List<MediaItem>> searchContentDirectory(String deviceUdn, String containerId, String searchCriteria, int startIndex, int requestCount) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.searchContentDirectory$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, containerId, searchCriteria, startIndex, requestCount]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<MediaItem>();
    }
  }

  /// Set the media URI to play on a renderer
  Future<void> setMediaUri(String deviceUdn, String uri, MediaMetadata metadata) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setMediaUri$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, uri, metadata]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Start playback
  Future<void> play(String deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.play$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Pause playback
  Future<void> pause(String deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.pause$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Stop playback
  Future<void> stop(String deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.stop$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Seek to specific position (in seconds)
  Future<void> seek(String deviceUdn, int positionSeconds) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.seek$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, positionSeconds]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Skip to next track
  Future<void> next(String deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.next$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Skip to previous track
  Future<void> previous(String deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.previous$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Set volume (0-100)
  Future<void> setVolume(String deviceUdn, int volume) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setVolume$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, volume]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Get current volume info
  Future<VolumeInfo> getVolumeInfo(String deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getVolumeInfo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as VolumeInfo?)!;
    }
  }

  /// Mute/unmute audio
  Future<void> setMute(String deviceUdn, bool muted) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setMute$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, muted]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Get current playback information
  Future<PlaybackInfo> getPlaybackInfo(String deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getPlaybackInfo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PlaybackInfo?)!;
    }
  }

  /// Get current position info
  Future<int> getCurrentPosition(String deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getCurrentPosition$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  /// Get transport state
  Future<TransportState> getTransportState(String deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getTransportState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as TransportState?)!;
    }
  }

  /// Get platform version
  Future<String> getPlatformVersion() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getPlatformVersion$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  /// Check if UPnP is available on the platform
  Future<bool> isUpnpAvailable() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.isUpnpAvailable$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// Get network interface information
  Future<List<String>> getNetworkInterfaces() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getNetworkInterfaces$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<String>();
    }
  }
}
