// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

/// Represents the current transport state
enum TransportState {
  stopped,
  playing,
  paused,
  transitioning,
  noMediaPresent,
}

/// Represents a Unique Device Name (UDN) following object calisthenics
class DeviceUdn {
  DeviceUdn({
    required this.value,
  });

  String value;

  Object encode() {
    return <Object?>[
      value,
    ];
  }

  static DeviceUdn decode(Object result) {
    result as List<Object?>;
    return DeviceUdn(
      value: result[0]! as String,
    );
  }
}

/// Volume level representation following object calisthenics
class VolumeLevel {
  VolumeLevel({
    required this.percentage,
  });

  int percentage;

  Object encode() {
    return <Object?>[
      percentage,
    ];
  }

  static VolumeLevel decode(Object result) {
    result as List<Object?>;
    return VolumeLevel(
      percentage: result[0]! as int,
    );
  }
}

/// Mute state representation
class MuteState {
  MuteState({
    required this.isMuted,
  });

  bool isMuted;

  Object encode() {
    return <Object?>[
      isMuted,
    ];
  }

  static MuteState decode(Object result) {
    result as List<Object?>;
    return MuteState(
      isMuted: result[0]! as bool,
    );
  }
}

/// Volume information combining level and mute state
class VolumeInfo {
  VolumeInfo({
    required this.level,
    required this.muteState,
  });

  VolumeLevel level;

  MuteState muteState;

  Object encode() {
    return <Object?>[
      level,
      muteState,
    ];
  }

  static VolumeInfo decode(Object result) {
    result as List<Object?>;
    return VolumeInfo(
      level: result[0]! as VolumeLevel,
      muteState: result[1]! as MuteState,
    );
  }
}

/// Represents a mute operation
class MuteOperation {
  MuteOperation({
    required this.shouldMute,
  });

  bool shouldMute;

  Object encode() {
    return <Object?>[
      shouldMute,
    ];
  }

  static MuteOperation decode(Object result) {
    result as List<Object?>;
    return MuteOperation(
      shouldMute: result[0]! as bool,
    );
  }
}

/// Represents a position in time (seconds)
class TimePosition {
  TimePosition({
    required this.seconds,
  });

  int seconds;

  Object encode() {
    return <Object?>[
      seconds,
    ];
  }

  static TimePosition decode(Object result) {
    result as List<Object?>;
    return TimePosition(
      seconds: result[0]! as int,
    );
  }
}

/// Represents a duration in time (seconds)
class TimeDuration {
  TimeDuration({
    required this.seconds,
  });

  int seconds;

  Object encode() {
    return <Object?>[
      seconds,
    ];
  }

  static TimeDuration decode(Object result) {
    result as List<Object?>;
    return TimeDuration(
      seconds: result[0]! as int,
    );
  }
}

/// Represents a URL following object calisthenics
class Url {
  Url({
    required this.value,
  });

  String value;

  Object encode() {
    return <Object?>[
      value,
    ];
  }

  static Url decode(Object result) {
    result as List<Object?>;
    return Url(
      value: result[0]! as String,
    );
  }
}

/// Represents an IP address following object calisthenics
class IpAddress {
  IpAddress({
    required this.value,
  });

  String value;

  Object encode() {
    return <Object?>[
      value,
    ];
  }

  static IpAddress decode(Object result) {
    result as List<Object?>;
    return IpAddress(
      value: result[0]! as String,
    );
  }
}

/// Represents a network port following object calisthenics
class NetworkPort {
  NetworkPort({
    required this.value,
  });

  int value;

  Object encode() {
    return <Object?>[
      value,
    ];
  }

  static NetworkPort decode(Object result) {
    result as List<Object?>;
    return NetworkPort(
      value: result[0]! as int,
    );
  }
}

/// Represents a discovery timeout following object calisthenics
class DiscoveryTimeout {
  DiscoveryTimeout({
    required this.seconds,
  });

  int seconds;

  Object encode() {
    return <Object?>[
      seconds,
    ];
  }

  static DiscoveryTimeout decode(Object result) {
    result as List<Object?>;
    return DiscoveryTimeout(
      seconds: result[0]! as int,
    );
  }
}

/// Represents a search target for discovery
class SearchTarget {
  SearchTarget({
    required this.target,
  });

  String target;

  Object encode() {
    return <Object?>[
      target,
    ];
  }

  static SearchTarget decode(Object result) {
    result as List<Object?>;
    return SearchTarget(
      target: result[0]! as String,
    );
  }
}

/// Discovery options with descriptive classes
class DiscoveryOptions {
  DiscoveryOptions({
    this.searchTarget,
    required this.timeout,
  });

  SearchTarget? searchTarget;

  DiscoveryTimeout timeout;

  Object encode() {
    return <Object?>[
      searchTarget,
      timeout,
    ];
  }

  static DiscoveryOptions decode(Object result) {
    result as List<Object?>;
    return DiscoveryOptions(
      searchTarget: result[0] as SearchTarget?,
      timeout: result[1]! as DiscoveryTimeout,
    );
  }
}

/// Represents a UPnP/DLNA device discovered on the network
class DlnaDevice {
  DlnaDevice({
    required this.udn,
    required this.friendlyName,
    required this.deviceType,
    required this.manufacturerName,
    required this.modelName,
    required this.ipAddress,
    required this.port,
    this.modelDescription,
    this.presentationUrl,
    this.iconUrl,
  });

  DeviceUdn udn;

  String friendlyName;

  String deviceType;

  String manufacturerName;

  String modelName;

  IpAddress ipAddress;

  NetworkPort port;

  String? modelDescription;

  Url? presentationUrl;

  Url? iconUrl;

  Object encode() {
    return <Object?>[
      udn,
      friendlyName,
      deviceType,
      manufacturerName,
      modelName,
      ipAddress,
      port,
      modelDescription,
      presentationUrl,
      iconUrl,
    ];
  }

  static DlnaDevice decode(Object result) {
    result as List<Object?>;
    return DlnaDevice(
      udn: result[0]! as DeviceUdn,
      friendlyName: result[1]! as String,
      deviceType: result[2]! as String,
      manufacturerName: result[3]! as String,
      modelName: result[4]! as String,
      ipAddress: result[5]! as IpAddress,
      port: result[6]! as NetworkPort,
      modelDescription: result[7] as String?,
      presentationUrl: result[8] as Url?,
      iconUrl: result[9] as Url?,
    );
  }
}

/// Represents a UPnP service available on a device
class DlnaService {
  DlnaService({
    required this.serviceType,
    required this.serviceId,
    required this.scpdUrl,
    required this.controlUrl,
    required this.eventSubUrl,
  });

  String serviceType;

  String serviceId;

  Url scpdUrl;

  Url controlUrl;

  Url eventSubUrl;

  Object encode() {
    return <Object?>[
      serviceType,
      serviceId,
      scpdUrl,
      controlUrl,
      eventSubUrl,
    ];
  }

  static DlnaService decode(Object result) {
    result as List<Object?>;
    return DlnaService(
      serviceType: result[0]! as String,
      serviceId: result[1]! as String,
      scpdUrl: result[2]! as Url,
      controlUrl: result[3]! as Url,
      eventSubUrl: result[4]! as Url,
    );
  }
}

/// Represents a subtitle track
class SubtitleTrack {
  SubtitleTrack({
    required this.id,
    required this.uri,
    required this.mimeType,
    required this.language,
    this.title,
    this.isDefault,
  });

  String id;

  Url uri;

  String mimeType;

  String language;

  String? title;

  bool? isDefault;

  Object encode() {
    return <Object?>[
      id,
      uri,
      mimeType,
      language,
      title,
      isDefault,
    ];
  }

  static SubtitleTrack decode(Object result) {
    result as List<Object?>;
    return SubtitleTrack(
      id: result[0]! as String,
      uri: result[1]! as Url,
      mimeType: result[2]! as String,
      language: result[3]! as String,
      title: result[4] as String?,
      isDefault: result[5] as bool?,
    );
  }
}

/// Abstract class for media metadata
sealed class MediaMetadata {
}

/// Audio-specific metadata
class AudioMetadata extends MediaMetadata {
  AudioMetadata({
    this.artist,
    this.album,
    this.genre,
    this.duration,
    this.albumArtUri,
    this.description,
    this.originalTrackNumber,
    this.upnpClass = 'object.item.audioItem.musicTrack',
    this.title,
  });

  String? artist;

  String? album;

  String? genre;

  TimeDuration? duration;

  Url? albumArtUri;

  String? description;

  int? originalTrackNumber;

  String? upnpClass;

  String? title;

  Object encode() {
    return <Object?>[
      artist,
      album,
      genre,
      duration,
      albumArtUri,
      description,
      originalTrackNumber,
      upnpClass,
      title,
    ];
  }

  static AudioMetadata decode(Object result) {
    result as List<Object?>;
    return AudioMetadata(
      artist: result[0] as String?,
      album: result[1] as String?,
      genre: result[2] as String?,
      duration: result[3] as TimeDuration?,
      albumArtUri: result[4] as Url?,
      description: result[5] as String?,
      originalTrackNumber: result[6] as int?,
      upnpClass: result[7] as String?,
      title: result[8] as String?,
    );
  }
}

/// Video-specific metadata
class VideoMetadata extends MediaMetadata {
  VideoMetadata({
    this.resolution,
    this.duration,
    this.description,
    this.thumbnailUri,
    this.genre,
    this.upnpClass = 'object.item.videoItem.movie',
    this.bitrate,
    this.title,
  });

  String? resolution;

  TimeDuration? duration;

  String? description;

  Url? thumbnailUri;

  String? genre;

  String? upnpClass;

  int? bitrate;

  String? title;

  Object encode() {
    return <Object?>[
      resolution,
      duration,
      description,
      thumbnailUri,
      genre,
      upnpClass,
      bitrate,
      title,
    ];
  }

  static VideoMetadata decode(Object result) {
    result as List<Object?>;
    return VideoMetadata(
      resolution: result[0] as String?,
      duration: result[1] as TimeDuration?,
      description: result[2] as String?,
      thumbnailUri: result[3] as Url?,
      genre: result[4] as String?,
      upnpClass: result[5] as String?,
      bitrate: result[6] as int?,
      title: result[7] as String?,
    );
  }
}

/// Image-specific metadata
class ImageMetadata extends MediaMetadata {
  ImageMetadata({
    this.resolution,
    this.description,
    this.thumbnailUri,
    this.date,
    this.upnpClass = 'object.item.imageItem.photo',
    this.title,
  });

  String? resolution;

  String? description;

  Url? thumbnailUri;

  String? date;

  String? upnpClass;

  String? title;

  Object encode() {
    return <Object?>[
      resolution,
      description,
      thumbnailUri,
      date,
      upnpClass,
      title,
    ];
  }

  static ImageMetadata decode(Object result) {
    result as List<Object?>;
    return ImageMetadata(
      resolution: result[0] as String?,
      description: result[1] as String?,
      thumbnailUri: result[2] as Url?,
      date: result[3] as String?,
      upnpClass: result[4] as String?,
      title: result[5] as String?,
    );
  }
}

/// Represents media content that can be played
class MediaItem {
  MediaItem({
    required this.id,
    required this.title,
    required this.uri,
    required this.mimeType,
    this.metadata,
    this.size,
    this.subtitleTracks,
  });

  String id;

  String title;

  Url uri;

  String mimeType;

  MediaMetadata? metadata;

  int? size;

  List<SubtitleTrack>? subtitleTracks;

  Object encode() {
    return <Object?>[
      id,
      title,
      uri,
      mimeType,
      metadata,
      size,
      subtitleTracks,
    ];
  }

  static MediaItem decode(Object result) {
    result as List<Object?>;
    return MediaItem(
      id: result[0]! as String,
      title: result[1]! as String,
      uri: result[2]! as Url,
      mimeType: result[3]! as String,
      metadata: result[4] as MediaMetadata?,
      size: result[5] as int?,
      subtitleTracks: (result[6] as List<Object?>?)?.cast<SubtitleTrack>(),
    );
  }
}

/// Represents playback information with descriptive time classes
class PlaybackInfo {
  PlaybackInfo({
    required this.state,
    required this.position,
    required this.duration,
    this.currentTrackUri,
    this.currentTrackMetadata,
  });

  TransportState state;

  TimePosition position;

  TimeDuration duration;

  String? currentTrackUri;

  MediaMetadata? currentTrackMetadata;

  Object encode() {
    return <Object?>[
      state,
      position,
      duration,
      currentTrackUri,
      currentTrackMetadata,
    ];
  }

  static PlaybackInfo decode(Object result) {
    result as List<Object?>;
    return PlaybackInfo(
      state: result[0]! as TransportState,
      position: result[1]! as TimePosition,
      duration: result[2]! as TimeDuration,
      currentTrackUri: result[3] as String?,
      currentTrackMetadata: result[4] as MediaMetadata?,
    );
  }
}

class PlaybackSpeed {
  PlaybackSpeed({
    required this.value,
  });

  double value;

  Object encode() {
    return <Object?>[
      value,
    ];
  }

  static PlaybackSpeed decode(Object result) {
    result as List<Object?>;
    return PlaybackSpeed(
      value: result[0]! as double,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is TransportState) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is DeviceUdn) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is VolumeLevel) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is MuteState) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is VolumeInfo) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is MuteOperation) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is TimePosition) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is TimeDuration) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is Url) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is IpAddress) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is NetworkPort) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is DiscoveryTimeout) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    }    else if (value is SearchTarget) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    }    else if (value is DiscoveryOptions) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    }    else if (value is DlnaDevice) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    }    else if (value is DlnaService) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    }    else if (value is SubtitleTrack) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    }    else if (value is AudioMetadata) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    }    else if (value is VideoMetadata) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    }    else if (value is ImageMetadata) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    }    else if (value is MediaItem) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    }    else if (value is PlaybackInfo) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    }    else if (value is PlaybackSpeed) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : TransportState.values[value];
      case 130: 
        return DeviceUdn.decode(readValue(buffer)!);
      case 131: 
        return VolumeLevel.decode(readValue(buffer)!);
      case 132: 
        return MuteState.decode(readValue(buffer)!);
      case 133: 
        return VolumeInfo.decode(readValue(buffer)!);
      case 134: 
        return MuteOperation.decode(readValue(buffer)!);
      case 135: 
        return TimePosition.decode(readValue(buffer)!);
      case 136: 
        return TimeDuration.decode(readValue(buffer)!);
      case 137: 
        return Url.decode(readValue(buffer)!);
      case 138: 
        return IpAddress.decode(readValue(buffer)!);
      case 139: 
        return NetworkPort.decode(readValue(buffer)!);
      case 140: 
        return DiscoveryTimeout.decode(readValue(buffer)!);
      case 141: 
        return SearchTarget.decode(readValue(buffer)!);
      case 142: 
        return DiscoveryOptions.decode(readValue(buffer)!);
      case 143: 
        return DlnaDevice.decode(readValue(buffer)!);
      case 144: 
        return DlnaService.decode(readValue(buffer)!);
      case 145: 
        return SubtitleTrack.decode(readValue(buffer)!);
      case 146: 
        return AudioMetadata.decode(readValue(buffer)!);
      case 147: 
        return VideoMetadata.decode(readValue(buffer)!);
      case 148: 
        return ImageMetadata.decode(readValue(buffer)!);
      case 149: 
        return MediaItem.decode(readValue(buffer)!);
      case 150: 
        return PlaybackInfo.decode(readValue(buffer)!);
      case 151: 
        return PlaybackSpeed.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Host API for device discovery and control
class MediaCastDlnaApi {
  /// Constructor for [MediaCastDlnaApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MediaCastDlnaApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> initializeUpnpService() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.initializeUpnpService$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isUpnpServiceInitialized() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.isUpnpServiceInitialized$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> shutdownUpnpService() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.shutdownUpnpService$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startDiscovery(DiscoveryOptions options) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.startDiscovery$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[options]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopDiscovery() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.stopDiscovery$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<DlnaDevice>> getDiscoveredDevices() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getDiscoveredDevices$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<DlnaDevice>();
    }
  }

  Future<DlnaDevice?> refreshDevice(DeviceUdn deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.refreshDevice$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as DlnaDevice?);
    }
  }

  Future<List<DlnaService>> getDeviceServices(DeviceUdn deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getDeviceServices$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<DlnaService>();
    }
  }

  Future<bool> hasService(DeviceUdn deviceUdn, String serviceType) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.hasService$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, serviceType]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isDeviceOnline(DeviceUdn deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.isDeviceOnline$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setMediaUri(DeviceUdn deviceUdn, Url uri, MediaMetadata metadata) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setMediaUri$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, uri, metadata]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMediaUriWithSubtitles(DeviceUdn deviceUdn, Url uri, MediaMetadata metadata, List<SubtitleTrack> subtitleTracks) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setMediaUriWithSubtitles$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, uri, metadata, subtitleTracks]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> supportsSubtitleControl(DeviceUdn deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.supportsSubtitleControl$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setSubtitleTrack(DeviceUdn deviceUdn, String? subtitleTrackId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setSubtitleTrack$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, subtitleTrackId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<SubtitleTrack>> getAvailableSubtitleTracks(DeviceUdn deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getAvailableSubtitleTracks$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<SubtitleTrack>();
    }
  }

  Future<SubtitleTrack?> getCurrentSubtitleTrack(DeviceUdn deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getCurrentSubtitleTrack$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as SubtitleTrack?);
    }
  }

  Future<void> play(DeviceUdn deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.play$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pause(DeviceUdn deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.pause$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stop(DeviceUdn deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.stop$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> seek(DeviceUdn deviceUdn, TimePosition position) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.seek$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, position]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setVolume(DeviceUdn deviceUdn, VolumeLevel volumeLevel) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setVolume$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, volumeLevel]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<VolumeInfo> getVolumeInfo(DeviceUdn deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getVolumeInfo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as VolumeInfo?)!;
    }
  }

  Future<void> setMute(DeviceUdn deviceUdn, MuteOperation muteOperation) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setMute$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, muteOperation]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PlaybackInfo> getPlaybackInfo(DeviceUdn deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getPlaybackInfo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PlaybackInfo?)!;
    }
  }

  Future<TimePosition> getCurrentPosition(DeviceUdn deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getCurrentPosition$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as TimePosition?)!;
    }
  }

  Future<TransportState> getTransportState(DeviceUdn deviceUdn) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getTransportState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as TransportState?)!;
    }
  }

  Future<void> setPlaybackSpeed(DeviceUdn deviceUdn, PlaybackSpeed speed) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setPlaybackSpeed$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[deviceUdn, speed]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
