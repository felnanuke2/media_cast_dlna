// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Represents the current transport state */
enum class TransportState(val raw: Int) {
  STOPPED(0),
  PLAYING(1),
  PAUSED(2),
  TRANSITIONING(3),
  NO_MEDIA_PRESENT(4);

  companion object {
    fun ofRaw(raw: Int): TransportState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Represents a Unique Device Name (UDN) following object calisthenics
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class DeviceUdn (
  val value: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DeviceUdn {
      val value = pigeonVar_list[0] as String
      return DeviceUdn(value)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      value,
    )
  }
}

/**
 * Volume level representation following object calisthenics
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class VolumeLevel (
  val percentage: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): VolumeLevel {
      val percentage = pigeonVar_list[0] as Long
      return VolumeLevel(percentage)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      percentage,
    )
  }
}

/**
 * Mute state representation
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class MuteState (
  val isMuted: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MuteState {
      val isMuted = pigeonVar_list[0] as Boolean
      return MuteState(isMuted)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      isMuted,
    )
  }
}

/**
 * Volume information combining level and mute state
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class VolumeInfo (
  val level: VolumeLevel,
  val muteState: MuteState
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): VolumeInfo {
      val level = pigeonVar_list[0] as VolumeLevel
      val muteState = pigeonVar_list[1] as MuteState
      return VolumeInfo(level, muteState)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      level,
      muteState,
    )
  }
}

/**
 * Represents a mute operation
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class MuteOperation (
  val shouldMute: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MuteOperation {
      val shouldMute = pigeonVar_list[0] as Boolean
      return MuteOperation(shouldMute)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      shouldMute,
    )
  }
}

/**
 * Represents a position in time (seconds)
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class TimePosition (
  val seconds: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): TimePosition {
      val seconds = pigeonVar_list[0] as Long
      return TimePosition(seconds)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      seconds,
    )
  }
}

/**
 * Represents a duration in time (seconds)
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class TimeDuration (
  val seconds: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): TimeDuration {
      val seconds = pigeonVar_list[0] as Long
      return TimeDuration(seconds)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      seconds,
    )
  }
}

/**
 * Represents a URL following object calisthenics
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class Url (
  val value: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): Url {
      val value = pigeonVar_list[0] as String
      return Url(value)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      value,
    )
  }
}

/**
 * Represents an IP address following object calisthenics
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class IpAddress (
  val value: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): IpAddress {
      val value = pigeonVar_list[0] as String
      return IpAddress(value)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      value,
    )
  }
}

/**
 * Represents a network port following object calisthenics
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class NetworkPort (
  val value: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NetworkPort {
      val value = pigeonVar_list[0] as Long
      return NetworkPort(value)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      value,
    )
  }
}

/**
 * Represents a discovery timeout following object calisthenics
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class DiscoveryTimeout (
  val seconds: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DiscoveryTimeout {
      val seconds = pigeonVar_list[0] as Long
      return DiscoveryTimeout(seconds)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      seconds,
    )
  }
}

/**
 * Represents a search target for discovery
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class SearchTarget (
  val target: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): SearchTarget {
      val target = pigeonVar_list[0] as String
      return SearchTarget(target)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      target,
    )
  }
}

/**
 * Discovery options with descriptive classes
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class DiscoveryOptions (
  val searchTarget: SearchTarget? = null,
  val timeout: DiscoveryTimeout
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DiscoveryOptions {
      val searchTarget = pigeonVar_list[0] as SearchTarget?
      val timeout = pigeonVar_list[1] as DiscoveryTimeout
      return DiscoveryOptions(searchTarget, timeout)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      searchTarget,
      timeout,
    )
  }
}

/**
 * Represents a UPnP/DLNA device discovered on the network
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class DlnaDevice (
  val udn: DeviceUdn,
  val friendlyName: String,
  val deviceType: String,
  val manufacturerName: String,
  val modelName: String,
  val ipAddress: IpAddress,
  val port: NetworkPort,
  val modelDescription: String? = null,
  val presentationUrl: Url? = null,
  val iconUrl: Url? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DlnaDevice {
      val udn = pigeonVar_list[0] as DeviceUdn
      val friendlyName = pigeonVar_list[1] as String
      val deviceType = pigeonVar_list[2] as String
      val manufacturerName = pigeonVar_list[3] as String
      val modelName = pigeonVar_list[4] as String
      val ipAddress = pigeonVar_list[5] as IpAddress
      val port = pigeonVar_list[6] as NetworkPort
      val modelDescription = pigeonVar_list[7] as String?
      val presentationUrl = pigeonVar_list[8] as Url?
      val iconUrl = pigeonVar_list[9] as Url?
      return DlnaDevice(udn, friendlyName, deviceType, manufacturerName, modelName, ipAddress, port, modelDescription, presentationUrl, iconUrl)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      udn,
      friendlyName,
      deviceType,
      manufacturerName,
      modelName,
      ipAddress,
      port,
      modelDescription,
      presentationUrl,
      iconUrl,
    )
  }
}

/**
 * Represents a UPnP service available on a device
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class DlnaService (
  val serviceType: String,
  val serviceId: String,
  val scpdUrl: Url,
  val controlUrl: Url,
  val eventSubUrl: Url
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DlnaService {
      val serviceType = pigeonVar_list[0] as String
      val serviceId = pigeonVar_list[1] as String
      val scpdUrl = pigeonVar_list[2] as Url
      val controlUrl = pigeonVar_list[3] as Url
      val eventSubUrl = pigeonVar_list[4] as Url
      return DlnaService(serviceType, serviceId, scpdUrl, controlUrl, eventSubUrl)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      serviceType,
      serviceId,
      scpdUrl,
      controlUrl,
      eventSubUrl,
    )
  }
}

/**
 * Represents a subtitle track
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class SubtitleTrack (
  val id: String,
  val uri: Url,
  val mimeType: String,
  val language: String,
  val title: String? = null,
  val isDefault: Boolean? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): SubtitleTrack {
      val id = pigeonVar_list[0] as String
      val uri = pigeonVar_list[1] as Url
      val mimeType = pigeonVar_list[2] as String
      val language = pigeonVar_list[3] as String
      val title = pigeonVar_list[4] as String?
      val isDefault = pigeonVar_list[5] as Boolean?
      return SubtitleTrack(id, uri, mimeType, language, title, isDefault)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      uri,
      mimeType,
      language,
      title,
      isDefault,
    )
  }
}

/**
 * Abstract class for media metadata
 *
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class MediaMetadata 
/**
 * Audio-specific metadata
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AudioMetadata (
  val artist: String? = null,
  val album: String? = null,
  val genre: String? = null,
  val duration: TimeDuration? = null,
  val albumArtUri: Url? = null,
  val description: String? = null,
  val originalTrackNumber: Long? = null,
  val upnpClass: String? = null,
  val title: String? = null
) : MediaMetadata()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AudioMetadata {
      val artist = pigeonVar_list[0] as String?
      val album = pigeonVar_list[1] as String?
      val genre = pigeonVar_list[2] as String?
      val duration = pigeonVar_list[3] as TimeDuration?
      val albumArtUri = pigeonVar_list[4] as Url?
      val description = pigeonVar_list[5] as String?
      val originalTrackNumber = pigeonVar_list[6] as Long?
      val upnpClass = pigeonVar_list[7] as String?
      val title = pigeonVar_list[8] as String?
      return AudioMetadata(artist, album, genre, duration, albumArtUri, description, originalTrackNumber, upnpClass, title)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      artist,
      album,
      genre,
      duration,
      albumArtUri,
      description,
      originalTrackNumber,
      upnpClass,
      title,
    )
  }
}

/**
 * Video-specific metadata
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class VideoMetadata (
  val resolution: String? = null,
  val duration: TimeDuration? = null,
  val description: String? = null,
  val thumbnailUri: Url? = null,
  val genre: String? = null,
  val upnpClass: String? = null,
  val bitrate: Long? = null,
  val title: String? = null
) : MediaMetadata()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): VideoMetadata {
      val resolution = pigeonVar_list[0] as String?
      val duration = pigeonVar_list[1] as TimeDuration?
      val description = pigeonVar_list[2] as String?
      val thumbnailUri = pigeonVar_list[3] as Url?
      val genre = pigeonVar_list[4] as String?
      val upnpClass = pigeonVar_list[5] as String?
      val bitrate = pigeonVar_list[6] as Long?
      val title = pigeonVar_list[7] as String?
      return VideoMetadata(resolution, duration, description, thumbnailUri, genre, upnpClass, bitrate, title)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      resolution,
      duration,
      description,
      thumbnailUri,
      genre,
      upnpClass,
      bitrate,
      title,
    )
  }
}

/**
 * Image-specific metadata
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class ImageMetadata (
  val resolution: String? = null,
  val description: String? = null,
  val thumbnailUri: Url? = null,
  val date: String? = null,
  val upnpClass: String? = null,
  val title: String? = null
) : MediaMetadata()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ImageMetadata {
      val resolution = pigeonVar_list[0] as String?
      val description = pigeonVar_list[1] as String?
      val thumbnailUri = pigeonVar_list[2] as Url?
      val date = pigeonVar_list[3] as String?
      val upnpClass = pigeonVar_list[4] as String?
      val title = pigeonVar_list[5] as String?
      return ImageMetadata(resolution, description, thumbnailUri, date, upnpClass, title)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      resolution,
      description,
      thumbnailUri,
      date,
      upnpClass,
      title,
    )
  }
}

/**
 * Represents media content that can be played
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class MediaItem (
  val id: String,
  val title: String,
  val uri: Url,
  val mimeType: String,
  val metadata: MediaMetadata? = null,
  val size: Long? = null,
  val subtitleTracks: List<SubtitleTrack>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MediaItem {
      val id = pigeonVar_list[0] as String
      val title = pigeonVar_list[1] as String
      val uri = pigeonVar_list[2] as Url
      val mimeType = pigeonVar_list[3] as String
      val metadata = pigeonVar_list[4] as MediaMetadata?
      val size = pigeonVar_list[5] as Long?
      val subtitleTracks = pigeonVar_list[6] as List<SubtitleTrack>?
      return MediaItem(id, title, uri, mimeType, metadata, size, subtitleTracks)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      title,
      uri,
      mimeType,
      metadata,
      size,
      subtitleTracks,
    )
  }
}

/**
 * Represents playback information with descriptive time classes
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PlaybackInfo (
  val state: TransportState,
  val position: TimePosition,
  val duration: TimeDuration,
  val currentTrackUri: String? = null,
  val currentTrackMetadata: MediaMetadata? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PlaybackInfo {
      val state = pigeonVar_list[0] as TransportState
      val position = pigeonVar_list[1] as TimePosition
      val duration = pigeonVar_list[2] as TimeDuration
      val currentTrackUri = pigeonVar_list[3] as String?
      val currentTrackMetadata = pigeonVar_list[4] as MediaMetadata?
      return PlaybackInfo(state, position, duration, currentTrackUri, currentTrackMetadata)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      state,
      position,
      duration,
      currentTrackUri,
      currentTrackMetadata,
    )
  }
}
private open class MediaCastDlnaPigeonPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          TransportState.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DeviceUdn.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          VolumeLevel.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MuteState.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          VolumeInfo.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MuteOperation.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TimePosition.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TimeDuration.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Url.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          IpAddress.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NetworkPort.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DiscoveryTimeout.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SearchTarget.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DiscoveryOptions.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DlnaDevice.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DlnaService.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SubtitleTrack.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AudioMetadata.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          VideoMetadata.fromList(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ImageMetadata.fromList(it)
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MediaItem.fromList(it)
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlaybackInfo.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is TransportState -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is DeviceUdn -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is VolumeLevel -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is MuteState -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is VolumeInfo -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is MuteOperation -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is TimePosition -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is TimeDuration -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is Url -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is IpAddress -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is NetworkPort -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is DiscoveryTimeout -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is SearchTarget -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is DiscoveryOptions -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is DlnaDevice -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is DlnaService -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is SubtitleTrack -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is AudioMetadata -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is VideoMetadata -> {
        stream.write(147)
        writeValue(stream, value.toList())
      }
      is ImageMetadata -> {
        stream.write(148)
        writeValue(stream, value.toList())
      }
      is MediaItem -> {
        stream.write(149)
        writeValue(stream, value.toList())
      }
      is PlaybackInfo -> {
        stream.write(150)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/**
 * Host API for device discovery and control
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface MediaCastDlnaApi {
  fun initializeUpnpService(callback: (Result<Unit>) -> Unit)
  fun isUpnpServiceInitialized(callback: (Result<Boolean>) -> Unit)
  fun shutdownUpnpService(callback: (Result<Unit>) -> Unit)
  fun startDiscovery(options: DiscoveryOptions, callback: (Result<Unit>) -> Unit)
  fun stopDiscovery(callback: (Result<Unit>) -> Unit)
  fun getDiscoveredDevices(callback: (Result<List<DlnaDevice>>) -> Unit)
  fun refreshDevice(deviceUdn: DeviceUdn, callback: (Result<DlnaDevice?>) -> Unit)
  fun getDeviceServices(deviceUdn: DeviceUdn, callback: (Result<List<DlnaService>>) -> Unit)
  fun hasService(deviceUdn: DeviceUdn, serviceType: String, callback: (Result<Boolean>) -> Unit)
  fun isDeviceOnline(deviceUdn: DeviceUdn, callback: (Result<Boolean>) -> Unit)
  fun setMediaUri(deviceUdn: DeviceUdn, uri: Url, metadata: MediaMetadata, callback: (Result<Unit>) -> Unit)
  fun setMediaUriWithSubtitles(deviceUdn: DeviceUdn, uri: Url, metadata: MediaMetadata, subtitleTracks: List<SubtitleTrack>, callback: (Result<Unit>) -> Unit)
  fun supportsSubtitleControl(deviceUdn: DeviceUdn, callback: (Result<Boolean>) -> Unit)
  fun setSubtitleTrack(deviceUdn: DeviceUdn, subtitleTrackId: String?, callback: (Result<Unit>) -> Unit)
  fun getAvailableSubtitleTracks(deviceUdn: DeviceUdn, callback: (Result<List<SubtitleTrack>>) -> Unit)
  fun getCurrentSubtitleTrack(deviceUdn: DeviceUdn, callback: (Result<SubtitleTrack?>) -> Unit)
  fun play(deviceUdn: DeviceUdn, callback: (Result<Unit>) -> Unit)
  fun pause(deviceUdn: DeviceUdn, callback: (Result<Unit>) -> Unit)
  fun stop(deviceUdn: DeviceUdn, callback: (Result<Unit>) -> Unit)
  fun seek(deviceUdn: DeviceUdn, position: TimePosition, callback: (Result<Unit>) -> Unit)
  fun setVolume(deviceUdn: DeviceUdn, volumeLevel: VolumeLevel, callback: (Result<Unit>) -> Unit)
  fun getVolumeInfo(deviceUdn: DeviceUdn, callback: (Result<VolumeInfo>) -> Unit)
  fun setMute(deviceUdn: DeviceUdn, muteOperation: MuteOperation, callback: (Result<Unit>) -> Unit)
  fun getPlaybackInfo(deviceUdn: DeviceUdn, callback: (Result<PlaybackInfo>) -> Unit)
  fun getCurrentPosition(deviceUdn: DeviceUdn, callback: (Result<TimePosition>) -> Unit)
  fun getTransportState(deviceUdn: DeviceUdn, callback: (Result<TransportState>) -> Unit)

  companion object {
    /** The codec used by MediaCastDlnaApi. */
    val codec: MessageCodec<Any?> by lazy {
      MediaCastDlnaPigeonPigeonCodec()
    }
    /** Sets up an instance of `MediaCastDlnaApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: MediaCastDlnaApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.initializeUpnpService$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.initializeUpnpService{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.isUpnpServiceInitialized$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.isUpnpServiceInitialized{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.shutdownUpnpService$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.shutdownUpnpService{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.startDiscovery$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val optionsArg = args[0] as DiscoveryOptions
            api.startDiscovery(optionsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.stopDiscovery$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stopDiscovery{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getDiscoveredDevices$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getDiscoveredDevices{ result: Result<List<DlnaDevice>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.refreshDevice$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            api.refreshDevice(deviceUdnArg) { result: Result<DlnaDevice?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getDeviceServices$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            api.getDeviceServices(deviceUdnArg) { result: Result<List<DlnaService>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.hasService$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            val serviceTypeArg = args[1] as String
            api.hasService(deviceUdnArg, serviceTypeArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.isDeviceOnline$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            api.isDeviceOnline(deviceUdnArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setMediaUri$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            val uriArg = args[1] as Url
            val metadataArg = args[2] as MediaMetadata
            api.setMediaUri(deviceUdnArg, uriArg, metadataArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setMediaUriWithSubtitles$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            val uriArg = args[1] as Url
            val metadataArg = args[2] as MediaMetadata
            val subtitleTracksArg = args[3] as List<SubtitleTrack>
            api.setMediaUriWithSubtitles(deviceUdnArg, uriArg, metadataArg, subtitleTracksArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.supportsSubtitleControl$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            api.supportsSubtitleControl(deviceUdnArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setSubtitleTrack$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            val subtitleTrackIdArg = args[1] as String?
            api.setSubtitleTrack(deviceUdnArg, subtitleTrackIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getAvailableSubtitleTracks$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            api.getAvailableSubtitleTracks(deviceUdnArg) { result: Result<List<SubtitleTrack>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getCurrentSubtitleTrack$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            api.getCurrentSubtitleTrack(deviceUdnArg) { result: Result<SubtitleTrack?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.play$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            api.play(deviceUdnArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.pause$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            api.pause(deviceUdnArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.stop$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            api.stop(deviceUdnArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.seek$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            val positionArg = args[1] as TimePosition
            api.seek(deviceUdnArg, positionArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setVolume$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            val volumeLevelArg = args[1] as VolumeLevel
            api.setVolume(deviceUdnArg, volumeLevelArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getVolumeInfo$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            api.getVolumeInfo(deviceUdnArg) { result: Result<VolumeInfo> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setMute$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            val muteOperationArg = args[1] as MuteOperation
            api.setMute(deviceUdnArg, muteOperationArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getPlaybackInfo$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            api.getPlaybackInfo(deviceUdnArg) { result: Result<PlaybackInfo> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getCurrentPosition$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            api.getCurrentPosition(deviceUdnArg) { result: Result<TimePosition> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getTransportState$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as DeviceUdn
            api.getTransportState(deviceUdnArg) { result: Result<TransportState> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
