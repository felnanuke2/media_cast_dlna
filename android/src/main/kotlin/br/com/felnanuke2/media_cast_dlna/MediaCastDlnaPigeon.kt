// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Represents the current transport state */
enum class TransportState(val raw: Int) {
  STOPPED(0),
  PLAYING(1),
  PAUSED(2),
  TRANSITIONING(3),
  NO_MEDIA_PRESENT(4);

  companion object {
    fun ofRaw(raw: Int): TransportState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Represents a UPnP/DLNA device discovered on the network
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class DlnaDevice (
  /** Unique Device Name */
  val udn: String,
  /** Human-readable device name */
  val friendlyName: String,
  /** Device type (e.g., MediaRenderer, MediaServer) */
  val deviceType: String,
  /** Manufacturer name */
  val manufacturerName: String,
  /** Model name */
  val modelName: String,
  /** Device IP address */
  val ipAddress: String,
  /** Device port */
  val port: Long,
  /** Optional model description */
  val modelDescription: String? = null,
  /** Optional presentation URL */
  val presentationUrl: String? = null,
  /** Optional icon URL */
  val iconUrl: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DlnaDevice {
      val udn = pigeonVar_list[0] as String
      val friendlyName = pigeonVar_list[1] as String
      val deviceType = pigeonVar_list[2] as String
      val manufacturerName = pigeonVar_list[3] as String
      val modelName = pigeonVar_list[4] as String
      val ipAddress = pigeonVar_list[5] as String
      val port = pigeonVar_list[6] as Long
      val modelDescription = pigeonVar_list[7] as String?
      val presentationUrl = pigeonVar_list[8] as String?
      val iconUrl = pigeonVar_list[9] as String?
      return DlnaDevice(udn, friendlyName, deviceType, manufacturerName, modelName, ipAddress, port, modelDescription, presentationUrl, iconUrl)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      udn,
      friendlyName,
      deviceType,
      manufacturerName,
      modelName,
      ipAddress,
      port,
      modelDescription,
      presentationUrl,
      iconUrl,
    )
  }
}

/**
 * Represents a UPnP service available on a device
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class DlnaService (
  /** Service type (e.g., AVTransport, RenderingControl, ContentDirectory) */
  val serviceType: String,
  /** Service ID */
  val serviceId: String,
  /** Service Control Protocol Description URL */
  val scpdUrl: String,
  /** Control URL for actions */
  val controlUrl: String,
  /** Event subscription URL */
  val eventSubUrl: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DlnaService {
      val serviceType = pigeonVar_list[0] as String
      val serviceId = pigeonVar_list[1] as String
      val scpdUrl = pigeonVar_list[2] as String
      val controlUrl = pigeonVar_list[3] as String
      val eventSubUrl = pigeonVar_list[4] as String
      return DlnaService(serviceType, serviceId, scpdUrl, controlUrl, eventSubUrl)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      serviceType,
      serviceId,
      scpdUrl,
      controlUrl,
      eventSubUrl,
    )
  }
}

/**
 * Represents media content that can be played
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class MediaItem (
  /** Content ID */
  val id: String,
  /** Content title */
  val title: String,
  /** Content URI */
  val uri: String,
  /** MIME type */
  val mimeType: String,
  /** Structured metadata (audio, video, image) */
  val metadata: MediaMetadata? = null,
  /** File size in bytes */
  val size: Long? = null,
  /** Available subtitle tracks */
  val subtitleTracks: List<SubtitleTrack>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MediaItem {
      val id = pigeonVar_list[0] as String
      val title = pigeonVar_list[1] as String
      val uri = pigeonVar_list[2] as String
      val mimeType = pigeonVar_list[3] as String
      val metadata = pigeonVar_list[4] as MediaMetadata?
      val size = pigeonVar_list[5] as Long?
      val subtitleTracks = pigeonVar_list[6] as List<SubtitleTrack>?
      return MediaItem(id, title, uri, mimeType, metadata, size, subtitleTracks)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      title,
      uri,
      mimeType,
      metadata,
      size,
      subtitleTracks,
    )
  }
}

/**
 * Represents a subtitle track
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class SubtitleTrack (
  /** Track ID */
  val id: String,
  /** Subtitle file URI */
  val uri: String,
  /** MIME type (text/srt, text/vtt, etc.) */
  val mimeType: String,
  /** Language code (ISO 639-1) */
  val language: String,
  /** Human-readable title */
  val title: String? = null,
  /** Whether this is the default subtitle track */
  val isDefault: Boolean? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): SubtitleTrack {
      val id = pigeonVar_list[0] as String
      val uri = pigeonVar_list[1] as String
      val mimeType = pigeonVar_list[2] as String
      val language = pigeonVar_list[3] as String
      val title = pigeonVar_list[4] as String?
      val isDefault = pigeonVar_list[5] as Boolean?
      return SubtitleTrack(id, uri, mimeType, language, title, isDefault)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      uri,
      mimeType,
      language,
      title,
      isDefault,
    )
  }
}

/**
 * Abstract class for media metadata
 *
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class MediaMetadata 
/**
 * Audio-specific metadata
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AudioMetadata (
  val artist: String? = null,
  val album: String? = null,
  val genre: String? = null,
  val duration: Long? = null,
  val albumArtUri: String? = null,
  val description: String? = null,
  val originalTrackNumber: Long? = null,
  val upnpClass: String? = null,
  val title: String? = null
) : MediaMetadata()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AudioMetadata {
      val artist = pigeonVar_list[0] as String?
      val album = pigeonVar_list[1] as String?
      val genre = pigeonVar_list[2] as String?
      val duration = pigeonVar_list[3] as Long?
      val albumArtUri = pigeonVar_list[4] as String?
      val description = pigeonVar_list[5] as String?
      val originalTrackNumber = pigeonVar_list[6] as Long?
      val upnpClass = pigeonVar_list[7] as String?
      val title = pigeonVar_list[8] as String?
      return AudioMetadata(artist, album, genre, duration, albumArtUri, description, originalTrackNumber, upnpClass, title)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      artist,
      album,
      genre,
      duration,
      albumArtUri,
      description,
      originalTrackNumber,
      upnpClass,
      title,
    )
  }
}

/**
 * Video-specific metadata
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class VideoMetadata (
  val resolution: String? = null,
  val duration: Long? = null,
  val description: String? = null,
  val thumbnailUri: String? = null,
  val genre: String? = null,
  val upnpClass: String? = null,
  val bitrate: Long? = null,
  val title: String? = null
) : MediaMetadata()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): VideoMetadata {
      val resolution = pigeonVar_list[0] as String?
      val duration = pigeonVar_list[1] as Long?
      val description = pigeonVar_list[2] as String?
      val thumbnailUri = pigeonVar_list[3] as String?
      val genre = pigeonVar_list[4] as String?
      val upnpClass = pigeonVar_list[5] as String?
      val bitrate = pigeonVar_list[6] as Long?
      val title = pigeonVar_list[7] as String?
      return VideoMetadata(resolution, duration, description, thumbnailUri, genre, upnpClass, bitrate, title)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      resolution,
      duration,
      description,
      thumbnailUri,
      genre,
      upnpClass,
      bitrate,
      title,
    )
  }
}

/**
 * Image-specific metadata
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class ImageMetadata (
  val resolution: String? = null,
  val description: String? = null,
  val thumbnailUri: String? = null,
  val date: String? = null,
  val upnpClass: String? = null,
  val title: String? = null
) : MediaMetadata()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ImageMetadata {
      val resolution = pigeonVar_list[0] as String?
      val description = pigeonVar_list[1] as String?
      val thumbnailUri = pigeonVar_list[2] as String?
      val date = pigeonVar_list[3] as String?
      val upnpClass = pigeonVar_list[4] as String?
      val title = pigeonVar_list[5] as String?
      return ImageMetadata(resolution, description, thumbnailUri, date, upnpClass, title)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      resolution,
      description,
      thumbnailUri,
      date,
      upnpClass,
      title,
    )
  }
}

/**
 * Represents playback information
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PlaybackInfo (
  /** Current transport state */
  val state: TransportState,
  /** Current position in seconds */
  val position: Long,
  /** Total duration in seconds */
  val duration: Long,
  /** Current track URI */
  val currentTrackUri: String? = null,
  /** Current track metadata */
  val currentTrackMetadata: MediaMetadata? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PlaybackInfo {
      val state = pigeonVar_list[0] as TransportState
      val position = pigeonVar_list[1] as Long
      val duration = pigeonVar_list[2] as Long
      val currentTrackUri = pigeonVar_list[3] as String?
      val currentTrackMetadata = pigeonVar_list[4] as MediaMetadata?
      return PlaybackInfo(state, position, duration, currentTrackUri, currentTrackMetadata)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      state,
      position,
      duration,
      currentTrackUri,
      currentTrackMetadata,
    )
  }
}

/**
 * Volume information
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class VolumeInfo (
  /** Volume level (0-100) */
  val volume: Long,
  /** Whether audio is muted */
  val muted: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): VolumeInfo {
      val volume = pigeonVar_list[0] as Long
      val muted = pigeonVar_list[1] as Boolean
      return VolumeInfo(volume, muted)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      volume,
      muted,
    )
  }
}

/**
 * Discovery options
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class DiscoveryOptions (
  /** Search target (ST header) - can be "upnp:rootdevice", "ssdp:all", or specific device type */
  val searchTarget: String? = null,
  /** Discovery timeout in seconds */
  val timeout: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DiscoveryOptions {
      val searchTarget = pigeonVar_list[0] as String?
      val timeout = pigeonVar_list[1] as Long
      return DiscoveryOptions(searchTarget, timeout)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      searchTarget,
      timeout,
    )
  }
}
private open class MediaCastDlnaPigeonPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          TransportState.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DlnaDevice.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DlnaService.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MediaItem.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SubtitleTrack.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AudioMetadata.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          VideoMetadata.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ImageMetadata.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlaybackInfo.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          VolumeInfo.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DiscoveryOptions.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is TransportState -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is DlnaDevice -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is DlnaService -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is MediaItem -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is SubtitleTrack -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is AudioMetadata -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is VideoMetadata -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is ImageMetadata -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is PlaybackInfo -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is VolumeInfo -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is DiscoveryOptions -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/**
 * Host API for device discovery and control
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface MediaCastDlnaApi {
  /**
   * Initialize the UPnP service and prepare for device discovery/control
   * This must be called before any other operations
   */
  fun initializeUpnpService()
  /** Check if UPnP service is initialized and ready */
  fun isUpnpServiceInitialized(): Boolean
  /** Shutdown and cleanup UPnP service */
  fun shutdownUpnpService()
  /**
   * Start UPnP/DLNA device discovery
   * Returns immediately, devices are reported via the DeviceDiscoveryApi callback
   * Note: initializeUpnpService() must be called first
   */
  fun startDiscovery(options: DiscoveryOptions)
  /** Stop device discovery */
  fun stopDiscovery()
  /** Get list of currently discovered devices */
  fun getDiscoveredDevices(): List<DlnaDevice>
  /** Refresh device information */
  fun refreshDevice(deviceUdn: String): DlnaDevice?
  /** Get services available on a device */
  fun getDeviceServices(deviceUdn: String): List<DlnaService>
  /** Check if device supports a specific service type */
  fun hasService(deviceUdn: String, serviceType: String): Boolean
  /**
   * Browse content directory of a media server
   * parentId: ID of the container to browse (use "0" for root)
   * startIndex: Starting index for pagination
   * requestCount: Number of items to request
   */
  fun browseContentDirectory(deviceUdn: String, parentId: String, startIndex: Long, requestCount: Long): List<MediaItem>
  /** Search content directory */
  fun searchContentDirectory(deviceUdn: String, containerId: String, searchCriteria: String, startIndex: Long, requestCount: Long): List<MediaItem>
  /** Set the media URI to play on a renderer */
  fun setMediaUri(deviceUdn: String, uri: String, metadata: MediaMetadata, callback: (Result<Unit>) -> Unit)
  /** Set the media URI with subtitle support */
  fun setMediaUriWithSubtitles(deviceUdn: String, uri: String, metadata: MediaMetadata, subtitleTracks: List<SubtitleTrack>, callback: (Result<Unit>) -> Unit)
  /** Check if device supports subtitle track control */
  fun supportsSubtitleControl(deviceUdn: String): Boolean
  /** Enable/disable subtitle track */
  fun setSubtitleTrack(deviceUdn: String, subtitleTrackId: String?, callback: (Result<Unit>) -> Unit)
  /** Get available subtitle tracks for current media */
  fun getAvailableSubtitleTracks(deviceUdn: String): List<SubtitleTrack>
  /** Get currently active subtitle track */
  fun getCurrentSubtitleTrack(deviceUdn: String): SubtitleTrack?
  /** Start playback */
  fun play(deviceUdn: String, callback: (Result<Unit>) -> Unit)
  /** Pause playback */
  fun pause(deviceUdn: String, callback: (Result<Unit>) -> Unit)
  /** Stop playback */
  fun stop(deviceUdn: String, callback: (Result<Unit>) -> Unit)
  /** Seek to specific position (in seconds) */
  fun seek(deviceUdn: String, positionSeconds: Long, callback: (Result<Unit>) -> Unit)
  /** Skip to next track */
  fun next(deviceUdn: String, callback: (Result<Unit>) -> Unit)
  /** Skip to previous track */
  fun previous(deviceUdn: String, callback: (Result<Unit>) -> Unit)
  /** Set volume (0-100) */
  fun setVolume(deviceUdn: String, volume: Long, callback: (Result<Unit>) -> Unit)
  /** Get current volume info */
  fun getVolumeInfo(deviceUdn: String): VolumeInfo
  /** Mute/unmute audio */
  fun setMute(deviceUdn: String, muted: Boolean, callback: (Result<Unit>) -> Unit)
  /** Get current playback information */
  fun getPlaybackInfo(deviceUdn: String): PlaybackInfo
  /** Get current position info */
  fun getCurrentPosition(deviceUdn: String): Long
  /** Get transport state */
  fun getTransportState(deviceUdn: String): TransportState
  /** Get platform version */
  fun getPlatformVersion(): String
  /** Check if UPnP is available on the platform */
  fun isUpnpAvailable(): Boolean
  /** Get network interface information */
  fun getNetworkInterfaces(): List<String>

  companion object {
    /** The codec used by MediaCastDlnaApi. */
    val codec: MessageCodec<Any?> by lazy {
      MediaCastDlnaPigeonPigeonCodec()
    }
    /** Sets up an instance of `MediaCastDlnaApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: MediaCastDlnaApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.initializeUpnpService$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.initializeUpnpService()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.isUpnpServiceInitialized$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isUpnpServiceInitialized())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.shutdownUpnpService$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.shutdownUpnpService()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.startDiscovery$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val optionsArg = args[0] as DiscoveryOptions
            val wrapped: List<Any?> = try {
              api.startDiscovery(optionsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.stopDiscovery$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.stopDiscovery()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getDiscoveredDevices$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getDiscoveredDevices())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.refreshDevice$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.refreshDevice(deviceUdnArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getDeviceServices$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.getDeviceServices(deviceUdnArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.hasService$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val serviceTypeArg = args[1] as String
            val wrapped: List<Any?> = try {
              listOf(api.hasService(deviceUdnArg, serviceTypeArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.browseContentDirectory$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val parentIdArg = args[1] as String
            val startIndexArg = args[2] as Long
            val requestCountArg = args[3] as Long
            val wrapped: List<Any?> = try {
              listOf(api.browseContentDirectory(deviceUdnArg, parentIdArg, startIndexArg, requestCountArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.searchContentDirectory$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val containerIdArg = args[1] as String
            val searchCriteriaArg = args[2] as String
            val startIndexArg = args[3] as Long
            val requestCountArg = args[4] as Long
            val wrapped: List<Any?> = try {
              listOf(api.searchContentDirectory(deviceUdnArg, containerIdArg, searchCriteriaArg, startIndexArg, requestCountArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setMediaUri$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val uriArg = args[1] as String
            val metadataArg = args[2] as MediaMetadata
            api.setMediaUri(deviceUdnArg, uriArg, metadataArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setMediaUriWithSubtitles$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val uriArg = args[1] as String
            val metadataArg = args[2] as MediaMetadata
            val subtitleTracksArg = args[3] as List<SubtitleTrack>
            api.setMediaUriWithSubtitles(deviceUdnArg, uriArg, metadataArg, subtitleTracksArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.supportsSubtitleControl$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.supportsSubtitleControl(deviceUdnArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setSubtitleTrack$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val subtitleTrackIdArg = args[1] as String?
            api.setSubtitleTrack(deviceUdnArg, subtitleTrackIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getAvailableSubtitleTracks$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.getAvailableSubtitleTracks(deviceUdnArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getCurrentSubtitleTrack$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.getCurrentSubtitleTrack(deviceUdnArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.play$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            api.play(deviceUdnArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.pause$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            api.pause(deviceUdnArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.stop$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            api.stop(deviceUdnArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.seek$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val positionSecondsArg = args[1] as Long
            api.seek(deviceUdnArg, positionSecondsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.next$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            api.next(deviceUdnArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.previous$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            api.previous(deviceUdnArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setVolume$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val volumeArg = args[1] as Long
            api.setVolume(deviceUdnArg, volumeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getVolumeInfo$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.getVolumeInfo(deviceUdnArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.setMute$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val mutedArg = args[1] as Boolean
            api.setMute(deviceUdnArg, mutedArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getPlaybackInfo$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.getPlaybackInfo(deviceUdnArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getCurrentPosition$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.getCurrentPosition(deviceUdnArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getTransportState$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceUdnArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.getTransportState(deviceUdnArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getPlatformVersion$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getPlatformVersion())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.isUpnpAvailable$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isUpnpAvailable())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.media_cast_dlna.MediaCastDlnaApi.getNetworkInterfaces$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getNetworkInterfaces())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
